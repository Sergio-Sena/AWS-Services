name: Deploy Full AWS Architecture

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  S3_BUCKET: aws-services-dashboard-prod

jobs:
  deploy-frontend:
    name: Deploy Frontend to S3 + CloudFront
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend-next/package-lock.json

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        run: |
          cd frontend-next
          npm ci

      - name: Build Next.js app
        run: |
          cd frontend-next
          npm run build
        env:
          NEXT_PUBLIC_API_URL: https://ouv5xejnw3.execute-api.us-east-1.amazonaws.com/prod
          NEXT_PUBLIC_ENVIRONMENT: production

      - name: Deploy to S3
        run: |
          cd frontend-next
          aws s3 sync out/ s3://${{ env.S3_BUCKET }} --delete --cache-control "public, max-age=31536000, immutable"

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id E3FUU8LKMW773I \
            --paths "/*"

  deploy-backend:
    name: Deploy Backend Lambda
    runs-on: ubuntu-latest
    needs: deploy-frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Serverless Framework
        run: npm install -g serverless

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: Deploy Lambda functions
        run: |
          cd backend
          serverless deploy --stage prod
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}